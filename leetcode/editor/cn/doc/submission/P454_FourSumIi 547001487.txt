    class Solution {
        public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
            // 创建HashMap，分别存储nums1和nums2的和与出现的次数
            Map<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < nums1.length; i++) {
                for (int j = 0; j < nums2.length; j++) {
                    int sum = nums1[i] + nums2[j];
                    map.put(sum, map.getOrDefault(sum, 0) + 1);
                }
            }
            // 遍历nums3和nums4，计算和为0的元组个数
            // count用来计算所有满足条件的元组个数
            int count = 0;
            for (int i = 0; i < nums3.length; i++) {
                for (int j = 0; j < nums4.length; j++) {
                    int sum = 0 - (nums3[i] + nums4[j]);
                    if (map.containsKey(sum)) {
                        count += map.get(sum);
                    }
                }
            }
            return count;
        }
    }

//runtime:136 ms
//memory:43.9 MB
